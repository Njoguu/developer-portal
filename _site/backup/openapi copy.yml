openapi: 3.1.0

info:

  title: 'APIs.io API'
  description: 'This is a prototype API for the APis.io API.'
  version: V1

  contact:
    name: Kin Lane
    email: info@apievangelist.com

servers:
  - url: https://dqkupdnj9l.execute-api.us-east-1.amazonaws.com/staging    

tags:

  - name: APIs
    description: An API index as defined by APIs.json
  - name: Search
    description: Searching for API related resources.
  - name: Maintainers
    description: Searching for maintainers of APIs. 
  - name: Tags
    description: Searching for APIs by tags.    

paths:

  /apis:

    get:
      operationId: searchAPIs
      summary: Search APIs
      description: 'Searching for APIs'
      parameters:

        - name: search
          description: 'Searching all APIs.'        
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: string

      tags:
        - APIs
        - Search

      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIs"

      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:m-s-apis-g/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.limit: method.request.querystring.limit
        requestTemplates:
          application/json: |-
            {
                "page" : "$input.params('page')",
                "limit" : "$input.params('limit')",
                "search" : "$input.params('search')"
            }
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
        type: aws
    
    post:
      summary: Add API
      description: 'Add a new API.'
      operationId: addAPI
      tags:
        - APIs
      requestBody:
        $ref: "#/components/requestBodies/apisjson"
      responses:
        "201":
          description: 201 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apisjson"
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:m-s-apis-po/invocations
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: aws
    options:
      summary: Add API
      description: 'Add a new API.'
      operationId: addOptionAPI
      tags:
        - APIs    
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Securit\
                y-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock      
  
  "/apis/{api_id}":
    
    get:
      summary: Get API
      description: 'Get individual API.'
      operationId: getAPI
      tags:
        - APIs    
      parameters:
        - name: api_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apisjson"
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:m-s-apis-api-g/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.api_id: method.request.path.api_id
        requestTemplates:
          application/json: |-
            {
                "api_id" : "$input.params('api_id')"
            }
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
        type: aws
    
    put:
      summary: Get API
      description: 'Get individual API.'
      operationId: updateAPI
      tags:
        - APIs      
      parameters:
        - name: api_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/apisjson"
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:m-s-apis-api-pu/invocations
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.api_id: method.request.path.api_id
        requestTemplates:
          application/json: |-
            {
                "api_id" : "$input.params('api_id')",
                "body" : $input.json('$') 
            }
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
        type: aws
    
    delete:
      summary: Delete API
      description: 'Delete individual API.'
      operationId: deleteAPI
      tags:
        - APIs      
      parameters:
        - name: api_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:m-s-apis-api-d/invocations
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.api_id: method.request.path.api_id
        requestTemplates:
          application/json: |-
            {
                "api_id" : "$input.params('api_id')"
            }
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
        type: aws
    options:
      summary: Get OPTION API
      description: 'Get individual API.'
      operationId: getOptionAPI
      tags:
        - APIs      
      parameters:
        - name: api_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,DELETE,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Securit\
                y-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock

  "/apis/properties":
    
    get:

      summary: Search API Properties
      description: 'Search for API properties across many APIs.'
      operationId: searchAPIProperties
      tags:
        - APIs 
        - Properties

      parameters:

        - name: type
          description: 'The type of properties to search for.'        
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: string

      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apisjson"
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:m-s-apis-api-g/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.api_id: method.request.path.api_id
        requestTemplates:
          application/json: |-
            {
                "api_id" : "$input.params('api_id')"
            }
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
        type: aws

  /maintainers:

    get:
      operationId: searchMaintainers
      summary: Search Maintainers
      description: 'Searching for Maintainers'
      parameters:
        - name: search
          description: 'Searching all Maintainers.'        
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: string
      tags:
        - Maintainers
        - Search
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/maintainers"
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:m-s-maintainers-g/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.limit: method.request.querystring.limit
        requestTemplates:
          application/json: |-
            {
                "page" : "$input.params('page')",
                "limit" : "$input.params('limit')",
                "search" : "$input.params('search')"
            }
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
        type: aws

  /tags:

    get:
      operationId: searchTags
      summary: Search Tags
      description: 'Searching for Tags'
      parameters:
        - name: search
          description: 'Searching all Tags.'        
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: string
      tags:
        - Tags
        - Search
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/searchtags"
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007596076917:function:m-s-tags-g/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.limit: method.request.querystring.limit
        requestTemplates:
          application/json: |-
            {
                "page" : "$input.params('page')",
                "limit" : "$input.params('limit')",
                "search" : "$input.params('search')"
            }
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
        type: aws        

components:

  requestBodies:
    apisjson:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apisjson"
      required: true
  
  securitySchemes:
    api_key:
      type: apiKey
      name: x-api-key
      in: header
  
  schemas:

    apisjson:
      type: object
      required:
      - name
      - description
      - url
      - apis
      - maintainers
      - tags 
      
      properties:
      
        name:
          type: string
          description: The name of the service described
          minLength: 5

        description:
          type: string
          description: Description of the service
          minLength: 5

        url:
          type: string
          description: URL where the apis.json file will live
          pattern: "^(http)|(https)://(.*)$"

        image:
          type: string
          description: Image to represent the API

        created:
          type: string
          format: date
          description: Date when the file was created

        modified:
          type: string
          format: date
          description: Date when the file was modified

        specificationVersion:
          type: string
          description: APIs.json spec version, latest is 0.14

        apis:
          type: array
          items:
            "$ref": "#/components/schemas/API"
          description: All the APIs of this service

        maintainers:
          type: array
          items:
            "$ref": "#/components/schemas/Maintainer"
          description: Maintainers of the apis.json file

        tags:
          type: array
          items:
            "$ref": "#/components/schemas/Tag"
          description: Tags to describe the service

        include:
          type: array
          items:
            "$ref": "#/components/schemas/Include"
          description: Links to other apis.json definitions included in this service.

    API:
      description: The description of the API
      oneOf:
      - required:
        - name
        - description
        - image
        - baseURL
        - humanURL
        - properties
        - contact
        properties:
          name:
            type: string
            description: name
            minLength: 5
          description:
            type: string
            description: description of the API
            minLength: 5
          image:
            type: string
            description: URL of an image representing the API
          baseURL:
            type: string
            pattern: "^(http)|(https)://(.*)$"
            description: baseURL
          humanURL:
            type: string
            pattern: "^(http)|(https)://(.*)$"
            description: humanURL
          tags:
            type: array
            items:
              type: string
              minLength: 1
            description: tags to describe the API
          properties:
            type: array
            items:
              "$ref": "#/components/schemas/urls"
            description: URLs
          contact:
            type: array
            items:
              "$ref": "#/components/schemas/contact"
            description: Contact to reach if questions about API
          meta:
            type: array
            items:
              "$ref": "#/components/schemas/metaInformation"

    Maintainer:
      description: The person or organization responsible for maintaining the API.
      required:
      - name
      properties:
        name:
          type: string
          description: name
          minLength: 5
      additionalProperties:
        type: string

    metaInformation:
      description: Metadata about the API
      required:
      - key
      - value
      properties:
        key:
          type: string
        value:
          type: string

    Contact:
      description: Information on contacting the API support
      required:
      - FN
      additionalProperties: true
      patternProperties:
        "^X-":
          type: string
      properties:
        FN:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        organizationName:
          type: string
          minLength: 1
        adr:
          type: string
        tel:
          type: string
          minLength: 1
        X-github:
          type: string
        photo:
          type: string
          pattern: "^(http)|(https)://(.*)$"
        vCard:
          type: string
          pattern: "^(http)|(https)://(.*)$"
        url:
          type: string
          pattern: "^(http)|(https)://(.*)$"

    Property:
      description: A representation of a URL
      required:
      - type
      - url
      properties:
        type:
          type: string
          pattern: "^(Swagger)$|^(RAML)$|^(Blueprint)$|^(WADL)$|^(WSDL)$|^(TermsOfService)$|^(InterfaceLicense)$|^(StatusPage)$|^(Pricing)$|^(Forums)$|^(AlertsTwitterHandle)$|^(X-[A-Za-z0-9\\-]*)$"
        url:
          type: string
          pattern: "^(http)|(https)://(.*)$"

    Tag:
      description: A consistent set of tag to apply to a description

    Include:
      description: Include other APIs.json file
      required:
      - name
      - url
      properties:
        name:
          type: string
          minLength: 1
        url:
          type: string
          pattern: "^(http)|(https)://(.*)$"