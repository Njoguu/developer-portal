<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-07-04T10:29:54-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">APIs.io API Developer Portal</title><subtitle>The developer portal for the APIs.io API Search API.</subtitle><author><name>Kin Lane</name></author><entry><title type="html">APIs.io Has a Spectral Powered API Ratings System</title><link href="http://localhost:4000/2023/12/05/apis-io-has-a-spectral-powered-api-ratings-system-copy/" rel="alternate" type="text/html" title="APIs.io Has a Spectral Powered API Ratings System" /><published>2023-12-05T00:00:00-05:00</published><updated>2023-12-05T00:00:00-05:00</updated><id>http://localhost:4000/2023/12/05/apis-io-has-a-spectral-powered-api-ratings-system%20copy</id><content type="html" xml:base="http://localhost:4000/2023/12/05/apis-io-has-a-spectral-powered-api-ratings-system-copy/">&lt;p&gt;When Steve asked me what we could do with APIs.io, I knew I wanted to improve upon what APIs.io v1 was as an API search, but I also lay the groundwork for what we need to help alleviate our API discovery pain. Every time I have made an investment in API discovery over the last decade, I also find myself considering what constitutes a good API, as well as a bad API, but also effectively dealing with the change that is inevitable across the API landscape. I knew that search would be important for the new APIs.io, something I”ll write a separate post about, but I new that an APIs rating system for APIs.io would play just as an important of a role.&lt;/p&gt;

&lt;p&gt;APIs.io has a &lt;a href=&quot;https://rules-docs.apis.io/&quot;&gt;ratings API&lt;/a&gt; which the engine uses to rate the APIs.json as well as the APIs that are indexed within them. This API ratings system is defined and driven using the open source API listing tool Spectral. The open source Spectral is best known for listing OpenAPI and AsyncAPI, but it will work for any JSON or YAML schema, so we &lt;a href=&quot;https://apis.io/rules/&quot;&gt;developed a base set of rules for APIs.json&lt;/a&gt;. Effectively linting not just your API, but your API operations. There is a Spectral rule for each APIs.json property, spanning potentially multiple APIs, but also the variety of properties of those APIs like having a sign up page, documentation, plans, terms of service, SDKs, and other common building blocks of our public and private API portals.&lt;/p&gt;

&lt;p&gt;We have Spectral rules for linting the APIs.json, as well as OpenAPIs that are indexed for any API. We will eventually develop Spectral rules for AsyncAPI, JSON Schema, and other machine-readable properties. Each Spectral rule has points associated with it. Right now we have applied scores based upon my gut feeling as we crafted each rule, but it is something we will adjust over time to “dial-in” the ratings algorithm—rewarding the API operational patterns that matter the most. We am running the rules against all APIs indexed via APIs.io every week, so we will have a record over time regarding how an API has increased or decreased its overall rating based upon things inside and outside the control of each API producer.&lt;/p&gt;

&lt;p&gt;We am using Spectral to map the positive patterns we are looking for from API producers, then identify which of those patterns are present across many API producers. This is different than the way it is used for API governance, where you tend to highlight the patterns that are missing from an API. It is easy to quickly adapt the Spectral rules applied to API operations using APIs.json to help guide API producers when it comes to adding common building blocks, or essentially governing the delivery of an API across the API lifecycle. We will spend time grouping rules into different areas of the common API lifecycle, platform, or other view of our API operations to help reduce cognitive load when it comes to rating each API.&lt;/p&gt;

&lt;p&gt;We are just getting started. We have 73 APIs.json for top API producers, indexing 215 APIs and growing. Right now we are &lt;a href=&quot;https://github.com/apis-json/artisanal&quot;&gt;hand-crafting artisanal APIs.json for providers&lt;/a&gt; to push forward the index as well as the ratings system. Over time API producers can begin maintaining their own APIs.json and we can focus exclusively on the Spectral powered API ratings system. Our goal with this wave of work was to prove the concept out, demonstrate the rating of APIs.json and OpenAPI, and then use to power the search ordering for APIs.io. Next we’ll focus on better coverage across the individual as well as common API properties we’ve identified across the 73 API producers we’ve indexed, and better organize and score each Spectral rule, until we find the optimal approach to rating APIs.&lt;/p&gt;</content><author><name>kinlane</name></author><category term="API" /><category term="Ratings" /><category term="Spectral" /><category term="Scores" /><summary type="html">When Steve asked me what we could do with APIs.io, I knew I wanted to improve upon what APIs.io v1 was as an API search, but I also lay the groundwork for what we need to help alleviate our API discovery pain. Every time I have made an investment in API discovery over the last decade, I also find myself considering what constitutes a good API, as well as a bad API, but also effectively dealing with the change that is inevitable across the API landscape. I knew that search would be important for the new APIs.io, something I”ll write a separate post about, but I new that an APIs rating system for APIs.io would play just as an important of a role.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://kinlane-productions2.s3.amazonaws.com/ratings-sytem.png" /><media:content medium="image" url="https://kinlane-productions2.s3.amazonaws.com/ratings-sytem.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How the APIs.io Search Works</title><link href="http://localhost:4000/2023/12/05/how-the-api-search-works/" rel="alternate" type="text/html" title="How the APIs.io Search Works" /><published>2023-12-05T00:00:00-05:00</published><updated>2023-12-05T00:00:00-05:00</updated><id>http://localhost:4000/2023/12/05/how-the-api-search-works</id><content type="html" xml:base="http://localhost:4000/2023/12/05/how-the-api-search-works/">&lt;p&gt;API search is hard. We haven’t seen a successful solution emerge in the last 20 years, and I think we need to think differently when it comes to this problem. We have a lot of ideas about how search should work, but we wanted to take incremental steps towards testing out what people (and systems) need when it comes to discovering APIs.&lt;/p&gt;

&lt;p&gt;Right now, the search on APIs.io is pretty simple, focusing on just a handful of areas that we feel can be individually iterated upon over time based upon what API producers need, what those search for APIs need, and what APIs.io and APIs.json need.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;APIs.json&lt;/strong&gt; - Each published APIs.json provides a modular index of an API operation in standard format.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;APIs.io API&lt;/strong&gt; - You can search for APIs indexed across APIs.json using keywords in title, description, tags.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;APIs.io Website Search&lt;/strong&gt; - You can search for APIs via autocomplete keyword search returning 25 results.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Search Engines&lt;/strong&gt; - Each API has a static detail page which can be indexed and searched for via web search engines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is it. That is all we have right now. We’d like to see more search solutions emerge that build on these four dimensions. However, there is also another important dimension to the APIs.io search – &lt;a href=&quot;https://developer.apis.io/2023/12/05/apis-io-has-a-spectral-powered-api-ratings-system/&quot;&gt;the APIs.io Rating System&lt;/a&gt;. This is ultimately what drives which way APIs get sorted via the API and the website search.&lt;/p&gt;

&lt;p&gt;We can see providing a standard paginated search results page as part of the website search, but we’d like to hear more answers to the following before we get to work.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How should the APIs.io API search work?&lt;/li&gt;
  &lt;li&gt;How is search different from Google?&lt;/li&gt;
  &lt;li&gt;How is search the same as Google?&lt;/li&gt;
  &lt;li&gt;Who will want to search for APIs?&lt;/li&gt;
  &lt;li&gt;Why will people search for APIs?&lt;/li&gt;
  &lt;li&gt;How will people search for APIs?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right now the search is pretty basic, but the seeds are there. The ratings system is in a similar state, it is pretty basic, but the rules-based approach has serious room for growth and dialing in. Together search and the ratings system, combined with the distributed approach of an APIs.json defined search will be what sets APIs.io apart from other implementations.&lt;/p&gt;

&lt;p&gt;Most of the APIs.json in the APIs.io index are hand-crafted by us. However, once API producers see their APIs listed, rated, and we showcase how consumers are searching, we are confident they’ll see the potential in maintaining their own APIs.jon file. This is when we feel that APIs.io will reach a new level in the API discovery conversation. The API producer defined index combined with the APIs.io search and rating system, will shift the API discovery conversation into the next stage.&lt;/p&gt;

&lt;p&gt;Have thoughts on API discovery, and how search should work? &lt;a href=&quot;https://github.com/orgs/api-search/discussions/78&quot;&gt;Join the Discussion&lt;/a&gt;.&lt;/p&gt;</content><author><name>kinlane</name></author><category term="API" /><category term="Search" /><summary type="html">API search is hard. We haven’t seen a successful solution emerge in the last 20 years, and I think we need to think differently when it comes to this problem. We have a lot of ideas about how search should work, but we wanted to take incremental steps towards testing out what people (and systems) need when it comes to discovering APIs.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://s3.amazonaws.com/kinlane-productions2/bw-icons/bw-transparency.jpg" /><media:content medium="image" url="https://s3.amazonaws.com/kinlane-productions2/bw-icons/bw-transparency.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Welcome to APIs.io</title><link href="http://localhost:4000/2023/12/05/welcome-to-apis-io/" rel="alternate" type="text/html" title="Welcome to APIs.io" /><published>2023-12-05T00:00:00-05:00</published><updated>2023-12-05T00:00:00-05:00</updated><id>http://localhost:4000/2023/12/05/welcome-to-apis-io</id><content type="html" xml:base="http://localhost:4000/2023/12/05/welcome-to-apis-io/">&lt;p&gt;APIs.io is the first API search engine. Built on top of the APIs.json specification, APIs.io empowers API producers to publish APIs.json indexes of their API operations. APIs.json provides metadata about each API being published, but also the things humans need to put APIs to work like a sign-up, documentation, and pricing page, but also the things other systems will need like an OpenAPI or JSON Schema artifact. APIs.io was first launched alongside the APIs.json specification, but is now being rebooted in 2023.&lt;/p&gt;

&lt;h2 id=&quot;the-apisjson-specification&quot;&gt;The APIs.json Specification&lt;/h2&gt;
&lt;p&gt;APIs.json is a specification format for defining your API operations, allowing you to maintain a machine-readable index of your public or private API landscape. The specification was created in 2014, and is something we have moved forward incrementally over the years, but have recently found more energy for lately as the API landscape continues to expand.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Specification&lt;/strong&gt; (&lt;a href=&quot;https://apisjson.org/&quot;&gt;Website&lt;/a&gt;) - The current JSON or YAML format you can put into any well-known location.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Builder&lt;/strong&gt; (&lt;a href=&quot;http://builder.apisyaml.org/&quot;&gt;Website&lt;/a&gt;) - A form for building APIs.json files quickly using a simple single page application.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Artisanal&lt;/strong&gt; (&lt;a href=&quot;https://github.com/apis-json/artisanal&quot;&gt;Repo&lt;/a&gt;) - A growing number of hand-crafted artisanal APIs.json for top API providers today.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This work on the APIs.json specification is important. Code tends to be ephemeral in my experience, and the specifications are what matter over any specific open-source or code implementation that may come or go over the years, however tooling are also essential for the adoption of the specification, so we can’t just stop there.&lt;/p&gt;

&lt;h2 id=&quot;apis-powering-apisio&quot;&gt;APIs Powering APIs.io&lt;/h2&gt;
&lt;p&gt;APIs.io is primarily just an API, or more accurately, a suite of APIs. Because any honest API specification, service, and tooling should be API-first, APIs.io is API-first. APIs.io is powered by ten separate APIs that all work in concert to help solve the API discovery across the realm of public APIs. These APIs all live in their own repositories, with their own documentation, and other resources, making for a buffet of API discovery solutions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Engine&lt;/strong&gt; (&lt;a href=&quot;https://engine-docs.apis.io/&quot;&gt;Documentation&lt;/a&gt;)) (&lt;a href=&quot;https://github.com/api-search/engine-api&quot;&gt;Repo&lt;/a&gt;) - The API that actually pulls and processes the APIs.json files and the APIs they contain.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rules&lt;/strong&gt; (&lt;a href=&quot;https://rules-docs.apis.io/&quot;&gt;Documentation&lt;/a&gt;)) (&lt;a href=&quot;https://github.com/api-search/rules-api&quot;&gt;Repo&lt;/a&gt;) - A collection of YAML Spectral rules that identify healthy APIs.json and OpenAPI patterns.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ratings&lt;/strong&gt; (&lt;a href=&quot;https://ratings-docs.apis.io/&quot;&gt;Documentation&lt;/a&gt;)) (&lt;a href=&quot;https://github.com/api-search/ratings-api&quot;&gt;Repo&lt;/a&gt;) - Apply rules and other criteria to APIs.json and and OpenAPI to rate on overall quality.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Linter&lt;/strong&gt; (&lt;a href=&quot;https://linter-docs.apis.io/&quot;&gt;Documentation&lt;/a&gt;)) (&lt;a href=&quot;https://github.com/api-search/linter-api&quot;&gt;Repo&lt;/a&gt;) - The API that takes the rules, applies them to APIs.json and OpenAPI, returning results.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Maintainers&lt;/strong&gt; (&lt;a href=&quot;https://maintainers-docs.apis.io/&quot;&gt;Documentation&lt;/a&gt;)) (&lt;a href=&quot;https://github.com/api-search/maintainers-api&quot;&gt;Repo&lt;/a&gt;) - An API for managing the maintainers that are publishing the different APIs.json.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Properties&lt;/strong&gt; (&lt;a href=&quot;https://properties-docs.apis.io/&quot;&gt;Documentation&lt;/a&gt;)) (&lt;a href=&quot;https://github.com/api-search/properties-api&quot;&gt;Repo&lt;/a&gt;) - Another API for managing all of the API and common properties in each APIs.json.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tags&lt;/strong&gt; (&lt;a href=&quot;https://tags-docs.apis.io/&quot;&gt;Documentation&lt;/a&gt;)) (&lt;a href=&quot;https://github.com/api-search/tags-api&quot;&gt;Repo&lt;/a&gt;) - The API for managing, enhancing, and making sense of the tags being applied to APis.json.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Publishing&lt;/strong&gt; (&lt;a href=&quot;https://publishing-docs.apis.io/&quot;&gt;Documentation&lt;/a&gt;)) (&lt;a href=&quot;https://github.com/api-search/publishing-api&quot;&gt;Repo&lt;/a&gt;) - An API for publishing API indexes to static single page applications hosted on GitHub.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Search&lt;/strong&gt; (&lt;a href=&quot;https://search-docs.apis.io/&quot;&gt;Documentation&lt;/a&gt;) (&lt;a href=&quot;https://github.com/api-search/search-api&quot;&gt;Repo&lt;/a&gt;) - The API that actually provides a search on top of all of the APIs in which the engine indexes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt; (&lt;a href=&quot;https://auth-docs.apis.io/&quot;&gt;Documentation&lt;/a&gt;) (&lt;a href=&quot;https://github.com/api-search/authentication-api&quot;&gt;Repo&lt;/a&gt;) - An API for authentication and generating a token so you can use the APIs.io API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the APIs that power the APIs.io search engine, pulling, rating, refining, and publishing the APIs using the APIs.json format. While still in beta, the APIs are openly licensed, and provide a modular approach to not just building, but also adopting and putting the APIs.io search to work for any API search engine. The goal is to eventually provide a suite of implementations using the APIs.json format that anyone can choose from to solve API discovery in their way.&lt;/p&gt;

&lt;h2 id=&quot;supporting-sites&quot;&gt;Supporting Sites&lt;/h2&gt;
&lt;p&gt;When it comes to finding APIs, we needed an API search engine that humans can use on top of the suite of APIs made available. To support the discovery of APIs, as well as the evolution of the API search, we’ve published a website, developer portal, and a simple administrative website to help manage things. These are the more visible aspects of the APIs.io search engine, but they are just one possible approach to how we can solve API discovery.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt; (&lt;a href=&quot;https://apis.io/&quot;&gt;Site&lt;/a&gt;) (&lt;a href=&quot;https://github.com/api-search/web-site&quot;&gt;Repo&lt;/a&gt;) - A simple static website that is hosted using Jekyll on GitHub pages, providing a way to discovery APIs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Developer Portal&lt;/strong&gt; (&lt;a href=&quot;https://developer.apis.io/&quot;&gt;Site&lt;/a&gt;) (&lt;a href=&quot;https://github.com/api-search/developer-portal&quot;&gt;Repo&lt;/a&gt;) - The developer portal that provides access to the suite of APIs that are powering APIs.io.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Administration&lt;/strong&gt; (&lt;a href=&quot;https://admin.apis.io/&quot;&gt;Site&lt;/a&gt;) (&lt;a href=&quot;https://github.com/api-search/admin&quot;&gt;Repo&lt;/a&gt;) - A simple administrative site for making common API calls, as well as refining APIs in the search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These websites make the APIs indexed using the APIs.io search discoverable. They also are designed to demonstrate how to operate your API with our own public developer portal for the APIs.io API, with supporting APIs.json. The website and developer portal are designed to work together to not just make APIs discoverable, but also help make APIs more discoverable through better defined API operations and supporting APIs.json indexes.&lt;/p&gt;

&lt;h2 id=&quot;the-discussion&quot;&gt;The Discussion&lt;/h2&gt;
&lt;p&gt;APIs.io is a work in progress, and open community affair. The entire website is managed via GitHub out in the open, showing our work as we go along, while also encouraging feedback and contribution from the community. Our goal is to keep iterating on the APIs.json specification, as well as the APIs.io websites and APIs out in the open based upon feedback from the community who is using them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Discussions&lt;/strong&gt; (&lt;a href=&quot;https://github.com/orgs/api-search/projects/1/views/1&quot;&gt;Forum&lt;/a&gt;) - Where you can find discussions about creating APIs.json for specific APIs, as well as discuss the APIs.io project.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Project&lt;/strong&gt; (&lt;a href=&quot;https://github.com/orgs/api-search/projects/1/views/1&quot;&gt;Kanban&lt;/a&gt;) - The kanban board where we are adding, moving forward, and completing a variety of tasks across the APIs.io project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We aren’t adding too many new features until we hear from more of the community about what API discovery means to them, and what they are looking for when searching for private and public APIs. We are keeping the APIs and websites very modular so that they can be rewritten to easily meet the needs of consumers, encouraging new features to be delivered in a modular API-first way, and helping provide all of the Lego building blocks we need to help with API discovery.&lt;/p&gt;

&lt;h2 id=&quot;what-is-next&quot;&gt;What is Next?&lt;/h2&gt;
&lt;p&gt;The work has only begun. We want to keep adding APIs, by both creating more APIs.json, but also encouraging API producers to maintain them on their own. We are talking to more API service providers to support APIs.json like SwaggerHub does in their API. We’d like to keep improving the search and the rating system behind the engine-—what is there is just the first version, and something that will only get better. We just need the community’s help to define what matters most when it comes to search and a ratings system.&lt;/p&gt;

&lt;p&gt;Alongside making APIs.io the best search engine possible, we are also exploring what an API search engine looks like within the enterprise. This is where an API discovery solution can have the greatest impact. However, providing a simple, yet high quality index of public APIs is where we are focused today, and would love to hear from you about what you need when it comes to API discovery. Googling for APIs is the most common approach to discovering APIs, but we are convinced that this will prove inadequate as we move from depending on a handful of APIs to needing hundreds or thousands of Apis to power our businesses. We feel that APIs.io provides the seeds of a more open, distributed, and community-driven approach to solving this problem, which is one that commercial API service providers have been unable to solve for over a decade.&lt;/p&gt;</content><author><name>kinlane</name></author><category term="API" /><category term="Search" /><summary type="html">APIs.io is the first API search engine. Built on top of the APIs.json specification, APIs.io empowers API producers to publish APIs.json indexes of their API operations. APIs.json provides metadata about each API being published, but also the things humans need to put APIs to work like a sign-up, documentation, and pricing page, but also the things other systems will need like an OpenAPI or JSON Schema artifact. APIs.io was first launched alongside the APIs.json specification, but is now being rebooted in 2023.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://developer.apis.io/images/apis-io.jpg" /><media:content medium="image" url="https://developer.apis.io/images/apis-io.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">An APIs.io Prototype</title><link href="http://localhost:4000/2023/08/13/apis-io-prototype/" rel="alternate" type="text/html" title="An APIs.io Prototype" /><published>2023-08-13T00:00:00-04:00</published><updated>2023-08-13T00:00:00-04:00</updated><id>http://localhost:4000/2023/08/13/apis-io-prototype</id><content type="html" xml:base="http://localhost:4000/2023/08/13/apis-io-prototype/">&lt;p&gt;I wanted to develop a prototype of the APIs.io search that brought the API search engine back to life using the APIs.json format. However, in the same motion I wanted to address two shortcomings that we never got around to developing before: 1) having it actually pull and update the APIs.json file, and 2) providing a rating system for the APIs that would help us filter out the garbage and identify the high quality APIs.&lt;/p&gt;

&lt;p&gt;To help me accomplish what I wanted I developed nine individual APIs that provide the state machine for the APIs.io search engine:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Search API&lt;/strong&gt; - Allows you to submit APIs.json, and search APIs, properties, maintainers, and tags.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Engine API&lt;/strong&gt; - Pulls the APIs.json, and the properties of APIs on weekly schedule.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ratings API&lt;/strong&gt; - Rates each APIs.json using a rules-driven approach to incentivizing high quality APIs, APIs.json, and OpenAPI indexes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rules API&lt;/strong&gt; - Spectral rules that target specific capabilities of APIs.json and OpenAPI files for use in rating.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Linting API&lt;/strong&gt; - Am API version of Spectral, retrofitted to lint not just OpenAPI, but also APIs.json.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Publishing API&lt;/strong&gt; - Handles publishing APIs, rules, properties, maintainers, and tags, to the static site behind the search engine.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Properties API&lt;/strong&gt; - An API for managing the properties of APIs across all APIs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Maintainers API&lt;/strong&gt; - An API for managing the maintainers of APIs across all APIs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tags API&lt;/strong&gt; - An API for managing the tags of APIs across all APIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To demonstrate the rating system I had to apply the API rating to the APIs.io API, being the model API we would like to see in APIs being submitted to the search engine. The APIs.io Search Engine API has all of the properties like documentation, OpenAPI, plans, etc. that we want to see across all API providers, and I’ve published an APIs.json file to document it.&lt;/p&gt;

&lt;p&gt;Then I found some of the other APIs.json files for providers that still exist out there. I will continue finding more, and also publish a bunch that I have created, but I wanted to get started with just a few–then push the engine and rating system by adding more. I can submit new APIs.json using the Search API, then it pulls the APIs.json using the Engine API, then rates the APIs.json using the Ratings API which uses the Rules API and Ling API to make the magic happen. Then using the publishing API it publishes APIs to the web site.&lt;/p&gt;

&lt;p&gt;There are two web sites, &lt;a href=&quot;https://apis.io/&quot;&gt;the search engine&lt;/a&gt; and the &lt;a href=&quot;https://developer.apis.io/&quot;&gt;developer portal for the API&lt;/a&gt;, which has the APIs.json for APIs.io and all the supporting properties. While the website has state page for all APIs, the search is dynamic through the Search API, returning results with each key stroke – I will keep working on this user experience. I was able to achieve an API search using the APIs.json for APIs.io, as well as the handful of other providers that I have included in the index–next, I will pull APIs.json from my archives and begin submitting to see what quality I endue with.&lt;/p&gt;

&lt;p&gt;The details of each API are pretty messy coming in, and I added the properties, maintainers, and tags APIs to begin getting a handle on these elements – while you will want to keep things as they were submitted by the APIs.json author, there will be things you want to translate, evolve, and change as things come in. I added these three layers for managing these three key dimensions of the index, but then also make it easy to publish them as part of the web site browsing and search.&lt;/p&gt;

&lt;p&gt;There is a lot of work still needed, but I was able to prove out the rating system, which I feel was the toughest portion. I’d like to add more rules, adjust the point system, and get more sophisticated about the algorithm in how they are applied. This is the most important layer I feel like because it will help keep the cream floating to the top, but also provide a transparent incentive model for others to follow if they want their API rising to the top.&lt;/p&gt;

&lt;p&gt;I’m going to step back for a week and just gather things that need to be done as issues, while I think about the big picture some more. I was able to prove the rule system works, and I’ll keep load testing the concept with more APIs.json files, but also adding the layer for OpenAPI and other machine readable properties – which is where the holy grail on this will be I think. I am excited about the potential of this for small and medium scale API search engines. I just don’t think 10K plus range is what is needed – I feel like you can have hundreds or millions in the index, but only the cream should rise to the top when it comes to a published search engine.&lt;/p&gt;</content><author><name>kinlane</name></author><category term="API" /><category term="Search" /><summary type="html">I wanted to develop a prototype of the APIs.io search that brought the API search engine back to life using the APIs.json format. However, in the same motion I wanted to address two shortcomings that we never got around to developing before: 1) having it actually pull and update the APIs.json file, and 2) providing a rating system for the APIs that would help us filter out the garbage and identify the high quality APIs.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://developer.apis.io/images/diagram-2.jpg" /><media:content medium="image" url="https://developer.apis.io/images/diagram-2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>